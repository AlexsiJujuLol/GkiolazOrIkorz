local IKORZ = loadstring(game:HttpGet('https://raw.githubusercontent.com/LuauCloud/Byte/refs/heads/main/Utils/Library.lua'))()

-- Create the UI
local IKORZ_Window = IKORZ.Add_Window('Acceptions')
local IKORZ_Tab = IKORZ_Window.Create_Tab({
    name = 'IKORZ',
    icon = 'rbxassetid://'
})

local IKORZ_Section = IKORZ_Tab.Create_Section()

-- Variables for UI state
local uiVisible = true -- UI is visible by default
local userInputService = game:GetService("UserInputService")

-- Toggle UI visibility
userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.P then -- Change "P" to your desired toggle key
        uiVisible = not uiVisible
        IKORZ_Window:SetVisible(uiVisible)
        print("[IKORZ] UI " .. (uiVisible and "Opened" or "Closed"))
    end
end)

-- Auto Parry Variables
local autoParryEnabled = false
local selectedParryMode = 'Custom' -- Default parry mode
local runService = game:GetService("RunService")
local playerService = game:GetService("Players")
local localPlayer = playerService.LocalPlayer
local connection

-- Auto Parry Toggle
IKORZ_Section.Create_DropToggle({
    name = 'Auto Parry',
    section = 'left',
    flag = 'Auto_Parry',
    options = {'Custom', 'Random', 'Backwards'},
    callback = function(state)
        autoParryEnabled = state
        if state then
            print('[IKORZ] Auto Parry Enabled')
            enableAutoParry()
        else
            print('[IKORZ] Auto Parry Disabled')
            disableAutoParry()
        end
    end,
    callback2 = function(selected)
        selectedParryMode = selected
        print('[IKORZ] Parry Mode Selected:', selected)
    end
})

-- Enable Auto Parry
local function enableAutoParry()
    if connection then connection:Disconnect() end

    connection = runService.RenderStepped:Connect(function()
        if not autoParryEnabled then return end
        handleAutoParryLogic()
    end)

    print('[IKORZ] Auto Parry Monitoring Started')
end

-- Disable Auto Parry
local function disableAutoParry()
    if connection then
        connection:Disconnect()
        connection = nil
    end
    print('[IKORZ] Auto Parry Monitoring Stopped')
end

-- Handle Auto Parry Logic
local function handleAutoParryLogic()
    local character = localPlayer.Character
    if not character then return end

    local humanoid = character:FindFirstChild("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or humanoid.Health <= 0 or not rootPart then return end

    -- Detect incoming attacks
    local attackIncoming = detectIncomingAttack(rootPart.Position)
    if attackIncoming then
        performParry()
    end
end

-- Detect Incoming Attack using Region3
local function detectIncomingAttack(playerPosition)
    -- Define Region3 around the player
    local regionSize = Vector3.new(15, 15, 15) -- Region size (customize as needed)
    local region = Region3.new(
        playerPosition - (regionSize / 2),
        playerPosition + (regionSize / 2)
    )

    -- Get all parts within the region
    local nearbyParts = workspace:FindPartsInRegion3WithIgnoreList(
        region,
        {localPlayer.Character}, -- Ignore the player's own character
        10 -- Max parts to scan
    )

    for _, part in pairs(nearbyParts) do
        -- Check for specific projectiles or enemy indicators
        if part.Name == "Ball" or part:FindFirstChild("AttackSignal") then
            return true -- Incoming attack detected
        end
    end

    return false
end

-- Perform Parry
local function performParry()
    if selectedParryMode == 'Custom' then
        print('[IKORZ] Executing Custom Parry')
        customParryLogic()
    elseif selectedParryMode == 'Random' then
        print('[IKORZ] Executing Random Parry')
        randomParryLogic()
    elseif selectedParryMode == 'Backwards' then
        print('[IKORZ] Executing Backwards Parry')
        backwardsParryLogic()
    end
end

-- Custom Parry Logic
local function customParryLogic()
    -- Add your custom parry logic
    print('[IKORZ] Custom Parry Logic Executed')
end

-- Random Parry Logic
local function randomParryLogic()
    local randomAngle = math.random(-180, 180)
    print('[IKORZ] Random Angle:', randomAngle)
    -- Adjust direction or angle randomly
end

-- Backwards Parry Logic
local function backwardsParryLogic()
    local character = localPlayer.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        rootPart.CFrame = rootPart.CFrame * CFrame.Angles(0, math.rad(180), 0)
        print('[IKORZ] Parried Backwards')
    end
end
